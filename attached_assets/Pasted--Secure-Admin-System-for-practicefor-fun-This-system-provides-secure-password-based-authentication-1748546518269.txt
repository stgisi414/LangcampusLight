# Secure Admin System for practicefor.fun

This system provides secure password-based authentication for the static admin.html page at practicefor.fun to access your langcamp.us server data.

## Setup Instructions

### 1. Initialize Admin Password

Run the setup script to create your admin credentials:

```bash
node setup-admin.js
```

This will prompt you for:
- Service name (default: practicefor_fun)
- Admin password

The password will be securely hashed and stored in your database.

### 2. Admin Panel Access

Your static admin.html page at https://practicefor.fun/admin.html will connect to these API endpoints:

- **Login**: `https://langcamp.us/api/exchange-admin/login`
- **Stats**: `https://langcamp.us/api/exchange-admin/stats`
- **API Logs**: `https://langcamp.us/api/exchange-admin/api-logs`

## Security Features

### Password Security
- Passwords are hashed using scrypt with random salts
- Client-side password encryption before transmission
- JWT tokens for session management (24-hour expiration)
- Rate limiting on login attempts (5 attempts per 15 minutes per IP)

### API Logging
- All Gemini API calls are automatically logged with:
  - User information
  - Request/response previews (first 200 characters)
  - Token usage
  - Success/error status
  - Performance metrics
  - IP address and user agent

## Using the Gemini Logger

To log Gemini API calls in your code, use the logging utilities:

### Method 1: Manual Logging
```javascript
import { logGeminiCall } from '../server/routes.js';

// In your route handler
const logger = logGeminiCall(req, {
  action: 'generate_exercise',
  model: 'gemini-pro',
  requestPreview: 'Generate exercise for word: hello'
});

try {
  // Your Gemini API call
  const response = await geminiClient.generateContent(prompt);
  
  await logger.end({
    success: true,
    responsePreview: response.text.substring(0, 200),
    inputTokens: response.usage?.promptTokenCount,
    outputTokens: response.usage?.candidatesTokenCount
  });
} catch (error) {
  await logger.end({
    success: false,
    error: error.message
  });
}
```

### Method 2: Automatic Logging Wrapper
```javascript
import { withGeminiLogging } from '../server/routes.js';

// In your route handler
const result = await withGeminiLogging(req, {
  action: 'generate_exercise',
  model: 'gemini-pro',
  requestPreview: 'Generate exercise for word: hello'
}, async () => {
  const response = await geminiClient.generateContent(prompt);
  return {
    success: true,
    responsePreview: response.text.substring(0, 200),
    inputTokens: response.usage?.promptTokenCount,
    outputTokens: response.usage?.candidatesTokenCount
  };
});
```

## Admin Dashboard Features

The admin panel displays:
- **Total API Calls**: All-time Gemini API usage
- **Today's Calls**: API calls made today
- **Active Users**: Users who made API calls in the last 24 hours
- **Recent Activity**: Detailed log of recent API calls with previews

## API Endpoints

### POST /api/exchange-admin/initialize
Initialize admin credentials (one-time setup)
```json
{
  "service": "practicefor_fun",
  "password": "your-secure-password"
}
```

### POST /api/exchange-admin/login
Authenticate admin user
```json
{
  "encryptedPassword": "sha256-hash",
  "timestamp": 1234567890,
  "service": "practicefor_fun"
}
```

### GET /api/exchange-admin/stats
Get dashboard statistics (requires Bearer token)

### GET /api/exchange-admin/api-logs
Get recent API logs (requires Bearer token)
- Query params: `limit` (default: 50), `offset` (default: 0)

## Environment Variables

Set these environment variables for additional security:

```bash
ADMIN_JWT_SECRET=your-secret-jwt-key-for-admin-tokens
```

If not set, a default secret will be used (change this in production).

## CORS Configuration

Make sure your server allows requests from practicefor.fun:

```javascript
app.use(cors({
  origin: ['https://practicefor.fun', 'https://langcamp.us'],
  credentials: true
}));
```

## Troubleshooting

1. **Login fails**: Check that the admin password was initialized correctly
2. **CORS errors**: Ensure practicefor.fun is in your CORS origins
3. **Token expired**: Sessions expire after 24 hours, admin needs to login again
4. **Rate limited**: Wait 15 minutes if too many login attempts were made